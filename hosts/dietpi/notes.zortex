# DietPI

## Architecture
Caddy
    - basic_auth https://caddyserver.com/docs/caddyfile/directives/basic_auth
ntfy
Filesharing
Photo gallary
Password manager
DNS
Docker registry https://hub.docker.com/_/registry

Rsync or syncthing with NFS for linux
SMB + SyncThing or FolderSync or Rsync
NextCloud

Raspberry pi as gateway connect to desktop via ethernet

On desktop:
Samba+NFS or NextCloud
PhotoPrism or Immich

Docker compose:
- caddy reverse proxy
- ntfy

Homelab:
- Website endpoint that provides monitoring, and ability to turn pc on and off via a button
- Have caddy authenticate. Take users to login page? Or basic-auth?
- Dashy, Homer, or homepage

Zortex:
- ntfy
- AWS mail sending
- Move manifest management to server
- zortex note server, show digest and other things

Zortex Notifications:
- Use cron to run script every minute
- Server to inject manifests
- Server endpoint or script that will check and send notifications

NixOS:
- Have certain services run on nixos
- NAS

## Zortex
I want you to create a docker container for my note system.
Dockerfile - packages the other files into an easily deployable container. Should take environment variables for the ntfy server endpoint.
crontab - runs run.sh every minute on the minute
server.py - flask server that receives manifests, updates the sqlite database for notifications and when they will occur
run.sh - script that will check the database and send requests to my ntfy server to send notifications.
database - sqlite database to store the notifications and when

This docker container will be run with docker-compose, which runs other containers for my homelab. It should be built to attach to the same docker network and integrate with a reverse proxy.
The manifest is a JSON document that includes all upcoming notifications. The server.py injests the manifest, updating the local database with pending notifications to be sent.
run.sh will send any pending notifications. And remove all stale notifications from the database.

## Services

**DNS & DHCP** Pi-hole and dnsmasq

**Dynamic DNS** ddclient

**Routing** nftables

Forward internet to my domain (treywilkinson.com) to my pi.

**VPN** WireGuard

**SSH** Dropbear

Backups:
Backup data to drive and nixos

System stats & Management:
webmin - remote system management with web interface
linux dash, phpSysInfo, RPi-Monitor, Netdata - web interface system stats
Homer - a modern homepage for services
portainer - docker container management
K3s - lightweight kubernetes

Network Security:
OPNsense

VPN:
- WireGuard, OpenVPN, PiVPN, Tailscale, ZeroTier

Password:
Vault warden - bitwarden password manager server

Files/photos:
Syncthing - backup and sync server with web interface
    - Sync files on android
NextCloud - NAS + OneDrive + Office365
    - File sharing
- Seafile
NFS, ProFTPD, Samba, vsftpd - FIle server
PhotoPrism - decentralized ai-powered photo app
immich

Reverse proxy:
Nginx
Traefik - complex
Caddy

DNS:
- PiHole

## Configuring

```bash
# allow VPN clients to use pihole for DNS requests
pihole -a -i local

# adding dietpi wg0 interface
ip link add wg0 type wireguard
ip addr add 10.0.0.1/24 dev wg0
wg set wg0 private-key ./privatekey
ip link set wg0 up
```

## Setup

- Needed to change wifi country
- Never added/connected to wifi on startup

AUTO_SETUP_SSH_SERVER_INDEX=
AUTO_SETUP_INSTALL_SOFTWARE_ID=
AUTO_SETUP_HEADLESS=

curl -fsSL https://get.docker.com | sh
sudo usermod -aG docker $USER
docker run hello-world
docker run -d --name ntfy \
  -p 80:80 \
  -v ntfy-data:/etc/ntfy \
  binwiederhier/ntfy serve

dietpi-software install 138   # WireGuard server (or 126??)
nano /etc/wireguard/wg0.conf

dietpi-software install 162   # Docker
dietpi-software install 163   # Docker-Compose (optional)

- harden ssh

SOFTWARE_DROPBEAR_PASSWORD_LOGIN=0
KEY_ROOT="YOUR_SSH_PUBLIC_KEY_HERE"
KEY_USER="YOUR_SSH_PUBLIC_KEY_HERE"

## ntfy
```
services:
  ntfy:
    image: binwiederhier/ntfy:latest
    container_name: ntfy
    command:
      - serve
    environment:
      - TZ=America/New_York
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./cache:/var/cache/ntfy
      - ./config:/etc/ntfy
    ports:
      - '80:80'
    logging:
      - driver: none
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1",
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - ntfy
    restart: unless-stopped
```

/etc/ntfy/config/server.yml
/etc/ntfy/cache

```yaml
base-url: 'https://ntfy.yourdomain.com'
behind-proxy: true
auth-file: '/var/lib/ntfy/user.db'
auth-default-access: 'deny-all'
enable-signup: false
```

```yaml
base-url: "http://ntfy.example.com"
listen-http: ":80"
listen-https: ":443"
key-file: "/etc/letsencrypt/live/ntfy.example.com.key"
cert-file: "/etc/letsencrypt/live/ntfy.example.com.crt"
cache-file: "/var/cache/ntfy/cache.db"
```

## https for ntfy server
install certbot and namecheap plugin:
```
sudo apt update
sudo apt install python3-pip python3-venv libaugeas0 -y
sudo python3 -m venv /opt/certbot/
sudo /opt/certbot/bin/pip install --upgrade pip
sudo /opt/certbot/bin/pip install certbot certbot-dns-namecheap
sudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot
```

get namecheap api credentials:
Profile > Tools > API Access > Enable, white list ip, copy api key
```
sudo mkdir -p /etc/letsencrypt
sudo nano /etc/letsencrypt/namecheap.ini

dns_namecheap_username = YOUR_NAMECHEAP_USERNAME
dns_namecheap_api_key = YOUR_NAMECHEAP_API_KEY

sudo chmod 600 /etc/letsencrypt/namecheap.ini
```

optaining certificate:
```
sudo certbot certonly \
  --dns-namecheap \
  --dns-namecheap-credentials /etc/letsencrypt/namecheap.ini \
  -d your.domain.com
```

/etc/letsencrypt/live/ntfy.treywilkinson.com/{fullchain,privkey}.pem

configure ntfy to use https:
```
sudo nano /etc/ntfy/server.yml
```

enable auto-renew:
https://certbot.org/renewal-setup
sudo certbot renew --dry-run


